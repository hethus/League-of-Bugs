generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  cpf       String   @unique
  isAdmin   Boolean  @default(false)
  bugPoint Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  favorites Favorite[]

  purchasedBPs PurchaseBP[]

  purchasedChampions PurchaseChampion[]

  @@map("user")
}

model Champion {
  id          String   @id @default(uuid())
  name        String   @unique
  price       Int
  title       String
  description String
  imageUrl    String
  difficulty  String
  youTubeUrl  String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  classe   Classe? @relation(fields: [classeId], references: [id], onDelete: SetNull)
  classeId String? @map("classe_id")

  favorites Favorite[]

  purchasedChampions PurchaseChampion[]

  @@map("champion")
}

model Classe {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  champion Champion[]

  @@map("classe")
}

model Favorite {
  id        String   @id @default(uuid())
  favoritedAt DateTime @default(now()) @map("favorited_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  champion     Champion @relation(fields: [championName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  championName String   @map("champion_name")

  @@unique([userId, championName])
  @@map("favorite")
}

model BugPoint {
  id        String   @id @default(uuid())
  price     Int      @unique
  imageUrl  String
  money     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  purchasedBPs PurchaseBP[]

  @@map("bug_points")
}

model PurchaseBP {
  id        String   @id @default(uuid())
  quantity  Int
  purchasedAt DateTime @default(now()) @map("purchased_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @map("user_id")

  bugPoint   BugPoint @relation(fields: [bugPointPrice], references: [price])
  bugPointPrice Int    @map("bugs_points_id")

  @@map("purchase_bp")
}

model PurchaseChampion {
  id        String   @id @default(uuid())
  purchasedAt DateTime @default(now()) @map("purchased_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  champion     Champion @relation(fields: [championName], references: [name], onDelete: Cascade)
  championName String   @map("champion_name")

  @@unique([userId, championName])
  @@map("purchase_champion")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../db.pdf"
}
